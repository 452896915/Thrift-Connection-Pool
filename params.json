{"name":"Thrift-connection-pool","tagline":"thrift连接池","body":"<h1>Thrift连接池实现</h1>\r\n\r\n目标：<br/>\r\n  1、支持池化管理thrift客户端连接<br/>\r\n  2、支持thrift服务器的负载均衡<br/>\r\n  3、支持thrift服务器列表的动态管理<br/>\r\n\r\n<h1>示例</h1>\r\n<h3>单服务示例</h3>\r\n\tThriftConnectionPoolConfig config = new ThriftConnectionPoolConfig();\r\n\tconfig.setConnectTimeout(3000);\r\n\tconfig.setThriftProtocol(TProtocolType.BINARY);\r\n\tconfig.setClientClass(Example.Client.class);\r\n\tconfig.addThriftServer(\"127.0.0.1\", 9119);\r\n\tconfig.setMaxConnectionPerServer(2);\r\n\tconfig.setMinConnectionPerServer(1);\r\n\tconfig.setIdleMaxAge(2, TimeUnit.SECONDS);\r\n\tconfig.setMaxConnectionAge(2);\r\n\tconfig.setLazyInit(false);\r\n\ttry {\r\n\t\tThriftConnectionPool<Example.Client> pool = new ThriftConnectionPool<Example.Client>(config);\r\n\t\tExample.Client client = pool.getConnection().getClient();\r\n\t\tclient.ping();\r\n\t\tpool.close();\r\n\t} catch (ThriftConnectionPoolException e) {\r\n\t\te.printStackTrace();\r\n\t} catch (TException e) {\r\n\t\te.printStackTrace();\r\n\t} catch (IOException e) {\r\n\t\te.printStackTrace();\r\n\t}\r\n\r\n<h3>多接口服务示例</h3>\r\n\tThriftConnectionPoolConfig config = new ThriftConnectionPoolConfig(ThriftServiceType.MULTIPLEXED_INTERFACE);\r\n\tconfig.setConnectTimeout(3000);\r\n\tconfig.setThriftProtocol(TProtocolType.BINARY);\r\n\tconfig.addThriftServer(\"127.0.0.1\", 9119);\r\n\tconfig.addThriftClientClass(\"other\", Other.Client.class);\r\n\tconfig.addThriftClientClass(\"example\", Example.Client.class);\r\n\r\n\tconfig.setMaxConnectionPerServer(2);\r\n\tconfig.setMinConnectionPerServer(1);\r\n\tconfig.setIdleMaxAge(2, TimeUnit.SECONDS);\r\n\tconfig.setMaxConnectionAge(2);\r\n\tconfig.setLazyInit(false);\r\n\tconfig.setAcquireIncrement(2);\r\n\tconfig.setAcquireRetryDelay(2000);\r\n\r\n\tconfig.setAcquireRetryAttempts(1);\r\n\tconfig.setMaxConnectionCreateFailedCount(1);\r\n\tconfig.setConnectionTimeoutInMs(5000);\r\n\r\n\tconfig.check();\r\n\r\n\tThriftConnectionPool<TServiceClient> pool = new ThriftConnectionPool<TServiceClient>(config);\r\n\tThriftConnection<TServiceClient> connection = pool.getConnection();\r\n\t// example service\r\n\tcom.wmz7year.thrift.pool.example.Example.Client exampleServiceClient = connection.getClient(\"example\",\r\n\t\t\tExample.Client.class);\r\n\texampleServiceClient.ping();\r\n\r\n\t// other service\r\n\tcom.wmz7year.thrift.pool.example.Other.Client otherServiceClient = connection.getClient(\"other\",\r\n\t\t\tOther.Client.class);\r\n\totherServiceClient.ping();\r\n\tpool.close();\r\n\r\n<h1>使用</h1>\r\n\t<dependency>\r\n    \t\t<groupId>com.github.wmz7year</groupId>\r\n    \t\t<artifactId>ThriftConnectionPool</artifactId>\r\n    \t\t<version>1.0.4-RELEASE</version>\r\n\t</dependency>\r\n\t\r\n<h1>特性</h1>\t\r\n  1、支持服务器之间的负载均衡<br/>\r\n  2、每个服务器拥有一个独立的连接分区 所有的连接分区合并一起为整个连接池<br/>\r\n  3、连接池支持自动创建连接、管理超时连接、管理失效连接<br/>\r\n  4、支持服务器列表动态增加或者移除<br/>\r\n  5、支持自动调取ping方法(在thrift描述文件添加方法void ping(),)检测连接可用性<br/>\r\n  6、支持当服务不可用时自动将对应的服务器剔除连接池的功能<br/>\r\n  7、添加多服务接口支持<br/>\r\n\r\n<h1>接下来需要完善内容：</h1>\r\n 1、补充文档<br/>\r\n 2、补充性能测试<br/>\r\n 3、完善使用例子<br/>\r\n 4、操作重试机制?<br/>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}